Use expandtab in vimrc so for make files use <CTRL-V><Tab> to put in hard tabs

# Lesson 4.3: MATCHING PARENTHESES SEARCH

** Type `%`{normal} to find a matching ), ], or }. **

 1. Place the cursor on any (, [, or { in the line below marked ✓.

 2. Now type the [%](%) character.

 3. The cursor will move to the matching parenthesis or bracket.

 4. Type `%`{normal} to move the cursor to the other matching bracket.

 5. Move the cursor to another (, ), [, ], {, or } and see what `%`{normal} does.

This ( is a test line with ('s, ['s, ] and {'s } in it. ))

NOTE: This is very useful in debugging a program with unmatched parentheses!

# Lesson 4.4: THE SUBSTITUTE COMMAND

** Type `:s/old/new/g` to substitute "new" for "old". **

 1. Move the cursor to the line below marked ✗.

 2. Type
~~~ cmd
        :s/thee/the/
~~~
    NOTE: The [:s](:s) command only changed the first match of "thee" in the line.

 3. Now type
~~~ cmd
        :s/thee/the/g
~~~
    Adding the g [flag](:s_flags) means to substitute globally in the line,
    change all occurrences of "thee" in the line.

Usually the best time to see the flowers is in the spring.

 4. To change every occurrence of a character string between two lines, type
~~~ cmd
        :#,#s/old/new/g
~~~
    where # are the line numbers of the range of lines where the
    substitution is to be done (i.e., `1,3` means from line 1 to line 3, inclusive).

    Type
~~~ cmd
        :%s/old/new/g
~~~
    to change every occurrence in the whole file.

    Type
~~~ cmd
        :%s/old/new/gc
~~~
    to find every occurrence in the whole file, with a prompt whether to
    substitute or not.

NOTE: You can also select the lines you want to substitute first using Visual mode.
      This will be explained more in a future lesson.

# Lesson 5.3: SELECTING TEXT TO WRITE

** To save part of the file, type `v`{normal} motion `:w FILENAME`{vim}. **

 1. Move the cursor to this line.

 2. Press [v](v) and move the cursor to the fifth item below. Notice that the
    text is highlighted.

 3. Press the `:`{normal} character. At the bottom of the screen

        `:'<,'>`{vim}

    will appear.

 4. Type

        `w TEST`{vim}

    where TEST is a filename that does not exist yet. Verify that you see

        `:'<,'>w TEST`{vim}

    before you press `<Enter>`{normal}.

 5. Neovim will write the selected lines to the file TEST. Use `:!ls`{vim} to see it.
    Do not remove it yet! We will use it in the next lesson.

NOTE: Pressing [v](v) starts [Visual selection](visual-mode). You can move the cursor around to
      make the selection bigger or smaller. Then you can use an operator to
      do something with the text. For example, `d`{normal} deletes the text.

# Lesson 5.4: RETRIEVING AND MERGING FILES

** To retrieve the contents of a file, type `:r FILENAME`{vim}. **

 1. Place the cursor just above this line.

NOTE: After executing Step 2 you will see text from Lesson 5.3. Then move
      DOWN to see this lesson again.

 2. Now retrieve your TEST file using the command

        `:r TEST`{vim}

    where TEST is the name of the file you used.
    The file you retrieve is placed below the cursor line.

 3. To verify that a file was retrieved, cursor back and notice that there
    are now two copies of Lesson 5.3, the original and the retrieved version.

NOTE: You can also read the output of an external command. For example,

        `:r !ls`{vim}

      reads the output of the `ls` command and puts it below the cursor.


# Lesson 6.2: THE APPEND COMMAND

** Type `a`{normal} to insert text AFTER the cursor. **

 1. Move the cursor to the start of the line below marked ✗.

 2. Press `e`{normal} until the cursor is on the end of "li".

 3. Type the lowercase letter `a`{normal} to [append](a) text AFTER the cursor.

 4. Complete the word like the line below it. Press `<Esc>`{normal} to exit Insert mode.

 5. Use `e`{normal} to move to the next incomplete word and repeat steps 3 and 4.

This line will allow you to practice appending text to a line.
This line will allow you to practice appending text to a line.

NOTE: [a](a), [i](i), and [A](A) all go to the same Insert mode, the only
      difference is where the characters are inserted.

# Lesson 6.3: ANOTHER WAY TO REPLACE

** Type a capital `R`{normal} to replace more than one character. **

 1. Move the cursor to the first line below marked ✗. Move the cursor to
    the beginning of the first "xxx".

 2. Now press `R`{normal} ([capital R](R)) and type the number below it in the
    second line, so that it replaces the "xxx".

 3. Press `<Esc>`{normal} to leave [Replace mode](mode-replace). Notice that
    the rest of the line remains unmodified.

 4. Repeat the steps to replace the remaining "xxx".

Adding 123 to 456 gives you 579.
Adding 123 to 456 gives you 579.

NOTE: Replace mode is like Insert mode, but every typed character
      replaces an existing character.

# Lesson 6.5: SET OPTION

** Set an option so search and substitute commands ignore case. **

There are many settings in Neovim that you can configure to suit your needs.

 1. Search for 'ignore' by entering: `/ignore`
    Repeat several times by pressing `n`{normal}.

 2. Set the 'ic' (Ignore case) option by entering:
~~~ cmd
        :set ic
~~~
 3. Now search for 'ignore' again by pressing `n`{normal}.
    Notice that Ignore and IGNORE are now also found.

 4. Set the 'hlsearch' and 'incsearch' options:
~~~ cmd
        :set hls is
~~~
 5. Now type the search command again and see what happens: /ignore <Enter>

 6. To disable ignoring case enter:
~~~ cmd
        :set noic
~~~
 7. To invert the value of a setting, prepend it with "inv":
~~~ cmd
        :set invic
~~~
NOTE: To remove the highlighting of matches enter:
~~~ cmd
        :nohlsearch
~~~
NOTE: If you want to ignore case for just one search command, use [\c](/\c)
      in the phrase: /ignore\c <Enter>

